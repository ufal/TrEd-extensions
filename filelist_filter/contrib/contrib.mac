#-*- cperl -*-

#ifndef filelist_filter
#define filelist_filter

{
package FilelistFilter;
BEGIN { import TredMacro; }
use strict;
use File::Spec;
use File::Path;

require Tk::DialogBox;
require Tk::Frame;
require Tk::Balloon;


#binding-context TredMacro
#bind FilelistFilter->create_filelist_filter to key F10 menu __* File-list Filter

my %filter=(
  '='  => sub {
    my ($c,$v)=@_;
    $v=~s/(['\\])/\\$1/g;
    qq{(\$cols[ $c ] eq '$v')}
  },
  '~'  => sub {
    my ($c,$v)=@_;
    my $qr = qr/$v/;
    qq{(\$cols[ $c ] =~ m($qr))}
  },
  '~*'  => sub {
    my ($c,$v)=@_;
    my $qr = qr/$v/i;
    qq{(\$cols[ $c ] =~ m($qr))}
  },
  '!='  => sub {
    my ($c,$v)=@_;
    $v=~s/(['\\])/\\$1/g;
    qq{!(\$cols[ $c ] eq '$v')}
  },
  '!~'  => sub {
    my ($c,$v)=@_;
    my $qr = qr/$v/;
    qq{!(\$cols[ $c ] =~ m($qr))}
  },
  '!~*'  => sub {
    my ($c,$v)=@_;
    my $qr = qr/$v/i;
    qq{!(\$cols[ $c ] =~ m($qr))}
  },
);


my $folder_files = [];
my $folder_index;

sub open_file_or_folder ($$) {
  my ($index_f,$input_type) = @_;
  my $fh;
  if($input_type eq 'file'){
    open($fh, '<:utf8', $index_f) or die "Cannot open $index_f: $!";
  }else{ # folder
    $folder_index = 0;
    open($fh, '<:utf8', $folder_files->[0]) or die "Cannot open $folder_files->[0]: $!";
  }
  return $fh;
}

sub get_line {
  my ($fh,$input_type) = @_;
  my $line;
  if ($input_type eq 'file'){
    $line = <$fh>;
  } else { # folder
    unless($line = <$fh>){
      if(++$folder_index < @{$folder_files}){
        open($fh, '<:utf8', $folder_files->[$folder_index]) or die "Cannot open $folder_files->[$folder_index]: $!";
        writeln('OPEN: ',$folder_files->[$folder_index]);
        $line = get_line($fh,$input_type);
      }
    }
  }
  return $line;
}

sub get_mask {
  my $dir = $_[0];
  if(-f File::Spec->catfile($dir,'mask')){
    open my $mask_fh,'<:utf8',File::Spec->catfile($dir,'mask');
    my $mask=<$mask_fh>;
    close $mask_fh;
    return $mask;
  }
}

sub generate_indexes {
  my ($folder,$num) = @_;
  my $query_file = File::Spec->catfile($folder,'.tred_filter_index',"query$num",'query.pml');
  my $query_fsfile = Open($query_file);
  my $query = CurrentFile()->tree(0);
  my $fl = GetFileList('tred filter index fl');
  SetCurrentFileList('tred filter index fl');
  my $first = 1;
  my $evaluator;
  my $out_filter;
  my $filename;

  my ($counter,$label);
  my $count = $fl->file_count;
  my $top = ToplevelFrame();
  my $g = $top->Toplevel(-title => "Generating indexes");
  # TODO : Interrupt
  $g->Label(-justify => 'left',
            -textvariable => \$label)->pack(-pady=>5,-padx=>10,-fill=>'x');
  $g->transient($top);
  $g->Popup;

  my $lasttime;
  foreach my $fname ($fl->files){
    $counter++;
    $label = "Progress: $counter/$count";
    my $now = time; #once in a second
    if ($now - $lasttime >= 1){
          $g->update;
          $lasttime = $now;
        }
    $filename = $fname;
    Open($filename);
    if($first){
      if(! -d File::Spec->catdir($folder,'.tred_filter_index',"index$num")){
        mkdir File::Spec->catdir($folder,'.tred_filter_index',"index$num");
      }
      $evaluator =
        Tree_Query::BtredEvaluator->new($query, {current_file => 1});
      $first = 0;
      my $fh;
      $out_filter =
        {init => sub{
           my (undef,undef,$basename) = File::Spec->splitpath($filename);
           open $fh,'>:utf8',File::Spec->catfile($folder,'.tred_filter_index',"index$num",$basename.'.idx');
         },
         process_row => sub{
           print $fh (join("\t",@{ $_[1] }),"\n");
         },
         finish => sub{
           close($fh);
         }
        };
    }
    $evaluator->init_filters($out_filter);
    while($evaluator->find_next_match){
      $evaluator->run_filters;
    }
    $evaluator->flush_filters;
    $evaluator->reset;
    CloseFile();
  }
  $g->destroy;
}

sub create_filelist_filter {
  ChangingFile(0);
  my $top = ToplevelFrame();
  $top->Unbusy();
  my $index_f = $TredMacroPreserve::filelist_filter::index_f;
  my $resp;
  {
    my $last_type;
    if($index_f){
      $last_type = -f $index_f ? 'file' : 'folder';
    }
    my @buttons = (($index_f ? ("Use last input $last_type") : ()),
                   "Choose input file",
                   "Choose input folder",
                   "Cancel");
    my $message =
      "This function is used to create a file list by selecting file names from ".
	"a given input file or folder. The input file(s) must consist of one or more TAB-separated columns, ".
	  "the last of which is a filename, URL, or a node address. ".
	    "The selection will be based on the values in the other columns.".
	      ($index_f ? "\n\nLast input $last_type: $index_f" : ""),
    my $d = $top->DialogBox(-title => "Filter to filelist",
			    -buttons => \@buttons);
    $d->add('Label', -text => $message, -justify => 'left',
	    -font => 'C_default',
	    -wraplength => '340p')->pack(-expand => 1, -fill => 'x');
    $d->BindReturn($d,1);
    $d->BindEscape();
    $d->bind('all','<Tab>',[sub { shift->focusNext; }]);
    $resp = $d->Show;
    $d->destroy;
  }
  return if $resp eq 'Cancel';
  if ($resp eq "Choose input file") {
    $TredMacroPreserve::filelist_filter::index_f = $index_f = main::get_open_filename($top,
								     -filetypes => [[ "Text files", "*.txt *.csv *.lst *.out *.log" ],
										    ["All files",        '*']],
								     -title => 'Open index file-list',
								    );
    return unless defined($index_f) and length($index_f);
  } elsif ($resp eq 'Choose input folder') {
    my $init_dir;
    if (CurrentFile()) {
      $init_dir = File::Spec->catdir((File::Spec->splitpath(FileName()))[0,1]);
      for (File::Spec->catdir($init_dir,'.tred_filter_index')) {
	$init_dir = $_ if -d $_;
      }
    } else {
      $init_dir = Cwd::get_cwd();
    }
    
    $TredMacroPreserve::filelist_filter::index_f = 
      $index_f = $top->chooseDirectory(-title => 'Open directory',
				       -initialdir => $init_dir,
				      );
    return unless defined($index_f) and length($index_f);
  }
  my $input_type = -f $index_f ? 'file' : 'folder';
  if($input_type eq 'folder'){
    $folder_files = [ glob(File::Spec->catfile($index_f,'*')) ];
  }
  my $fh = open_file_or_folder($index_f,$input_type);

  my @filter = @{$TredMacroPreserve::filelist_filter::filter||[]};
  my @f;
  $TredMacroPreserve::filelist_filter::filter = \@f;

  my @colnum;
  my @op;
  my $base_dir = $TredMacroPreserve::filelist_filter::base_dir;
  {

    my $d = $top->DialogBox(-title => 'Filter filelist', -buttons=>[qw(OK Cancel)]);
    $d->BindEscape();
    my $b = $d->Balloon();
    my $last_col=0;
    my $line = get_line($fh,$input_type); chomp($line);
    my @cols = split /\t/,$line;
    unless (File::Spec->file_name_is_absolute($cols[-1])) {
      my $f=$d->add('LabFrame',-label=>'Base directory',
		    -labelside=>'left')->pack(-side => 'top',-expand => 1, -fill => 'x');
      $f->Subwidget('border')->configure(-relief => 'flat');
      my $e = $f->Entry(-textvariable=>\$base_dir)->pack(-side=>'left',-expand => 1, -fill => 'x');
      $f->Button(-text => '...',
			 -command => sub {
			   $base_dir = $d->chooseDirectory(-title => 'Base directory',
							   -initialdir => $base_dir,
							   #-mustexist=>1
							  )
			     || $base_dir;
			 }
			)->pack(-side=>'right');

      $b->attach($e, -balloonmsg => 'Set base directory for relative filenames');
    }

    my $F = $d->add('LabFrame',-label=>'Filters', -labelside=>'acrosstop')->pack(-side => 'top',-expand => 1, -fill => 'x');
    my $add_filter = sub {
      my $c = $last_col++;
      my $f=$F->LabFrame(-label=>'Column #', -labelside=>'left')->pack(-side => 'top',-expand => 1, -fill => 'x');
      $f->Subwidget('border')->configure(-relief => 'flat');
      $filter[$c]{colnum}||= ($c+1) % @cols;
      my $ce = $f->Entry(-textvariable=>\$filter[$c]{colnum},
			-width=>2,
			-relief=>'flat',
			-validate => 'all',
			-validatecommand=>sub{ $_[0] =~ /^-?\d*$/},
		       )->pack(-side=>'left');
      $b->attach($ce, -balloonmsg => "The column number can be negative to count from the right\n".
		   "(the rightmost column is -1 and should be the filename/URL/node address)");
      my @opts=qw(= ~ ~* != !~ !~*);
      my $o = $f->Optionmenu(
	             -options => \@opts,
		     -textvariable => \$filter[$c]{op},
		     -relief       => 'flat')->pack(-side=>'left');

      # tilda is used in a special way in menu, we must repair it:
      $o->menu->entryconfigure($_,-underline=>-1, -label=>$opts[$_]) for 0..$#opts;
      my $e = $f->Entry(-textvariable=>\$filter[$c]{value})->pack(-expand => 1, -fill => 'x',-side=>'left');
      $f->Button(-text=>'x',-command=>sub{ $f->packForget(); $f->destroy })->pack(-side=>'left') if $c>0;
      $e->focus if ($c == 0);
    };
    my $count = scalar(@filter)||1;
    $add_filter->() for (1..$count);
    $d->add('Button',-text=>'Add filter',
	    -command=>$add_filter,
	   )->pack(-side => 'top');

    {
      my $f=$d->add('LabFrame',-label=>'Input file preview', -labelside=>'acrosstop')->pack(-side => 'top',-expand => 1, -fill => 'both');
      my $t = $f->Scrolled('ROText',-background=>'#FFFFEC', -height=>15,-scrollbars=>'oe')->pack(-expand => 1, -fill => 'both');
      my $line;
      for (1..10) {
	$line = get_line($fh,$input_type) or last;
	$t->insert('end',$line);
      }
      if ($line) {
	$t->insert('end','...show more lines...','more');
	$t->tagConfigure('more',-foreground=>'darkblue',-underline => 1,-justify=>'center');
	$t->tagBind('more','<1>',sub{
		      for (1..50) {
			$line = get_line($fh,$input_type) or last;
			$t->insert('end - 1 line',$line);
		      }
		      $t->see('end');
		      if (!$line) {
			$t->tagConfigure('more',-elide => 1);
		      }
		    });
      }
    }

    while (1) {
      my $resp = $d->Show();
      @f = grep { defined($_->{value}) && length($_->{value}) } @filter;
      last unless $resp eq 'OK';
      $TredMacroPreserve::filelist_filter::base_dir = $base_dir;
      if($input_type eq 'file'){
        seek($fh,0,"SEEK_SET");
      }else{
        $fh = open_file_or_folder($index_f,'folder');
      }
      my(undef,undef,$basename)=File::Spec->splitpath($index_f);
      my @list;
      my $line;
      my @cols;
      my $code;
      my $filter_sub;
      eval {
	$code  = q`sub { `.
	  join (' and ', map $filter{$_->{op}}->((($_->{colnum}>0)?$_->{colnum}-1:$_->{colnum}),$_->{value}), @f).
	    q`}`;
	print STDERR $code,"\n";
	$filter_sub = eval($code);
	die $@ if $@;
      };
      if ($@) {
	ErrorMessage("Error while compiling the following generated code:$code\n",$@);
	print "Continuing\n";
	next;
      }
      while ($line = get_line($fh,$input_type)) {
	chomp $line;
	@cols = split(/\t/,$line);
	if ($filter_sub->()) {
	  my $file = $cols[-1];
	  $file = File::Spec->rel2abs($file, $base_dir) if defined($base_dir) and length($base_dir);
	  push @list, $file;
	}
      }
      close $index_f;
      if (@list) {
	my $fl = Filelist->new($basename.'['.join(",",map{'$'.$_->{colnum}.$_->{op}.$_->{value} } @f).']');
	$fl->add_arrayref(0,\@list);
	AddNewFileList($fl);
	SetCurrentFileList($fl->name);
	$this = CurrentNodeInOtherWindow($grp);
      } else {
	next unless
	  QuestionQuery("No match","No rows match the given filter!","Change filter","Cancel") eq "Cancel";
      }
      last;
    }
    $d->destroy;
  }
}

my $folder;
my $mask;

sub get_queries {
  my $folder = $_[0];
  my $queries;
  foreach my $dir (glob File::Spec->catdir($folder,'.tred_filter_index','query*')){
    if(-f File::Spec->catfile($dir,'name')
       and -f File::Spec->catfile($dir,'mask')
       and -f File::Spec->catfile($dir,'query.pml')){
      my $fh;
      open $fh,File::Spec->catfile($dir,'name');
      my $name = <$fh>;
      open $fh,File::Spec->catfile($dir,'mask');
      $mask = <$fh>;
      push @$queries,[$name,$mask,$dir];
    }else{ # remove invalid folders
      rmtree($dir);
      my $num = $dir;
      $num =~ /.*query([0-9]+)/;
      $num = $1;
      $num = File::Spec->catdir($folder,'.tred_filter_index',"index$num");
      rmtree($num) if -d $num;
    }
  }
  return $queries;
}


sub edit_query {
  my $num = $_[0];
  my $fl = Filelist->new("tred filter index fl");
  writeln("$num,$folder,$mask,",File::Spec->catfile($folder,$mask));
  $fl->add(0,File::Spec->catfile($folder,$mask));
  AddNewFileList($fl);
  my $query_file = File::Spec->catfile($folder,'.tred_filter_index',"query$num",'query.pml');
  my $search = Tree_Query->NewQuery({
                 query_file => $query_file,
                 new_search => {filelist => $fl->name},
                 tree_no => 1,
	         no_select => 1
               });
  if ($search) {
    my $toolbar = GetUserToolbar($search->identify);
    my $b = $toolbar->Button(
              -text => 'Finish and Generate Indexes',
	      -command => MacroCallback
                             ([sub {
                                 my ($search_ident)=@_;
                                 generate_indexes($folder,$num);
                                 Tree_Query->DestroySearch($search_ident);
                                 for my $win (TrEdWindows()) {
                                   if (CurrentFile($win) && Treex::PML::IO::is_same_filename(CurrentFile($win)->filename(), $query_file)) {
                                     CloseFileInWindow($win);
                                     CloseWindow($win);
                                   }
                                 }
                               },$search->identify]),
              -font    =>'C_normal',
	      -takefocus=>0,
            )->pack(-side=>'right',-padx => 5);
  }
}

DeclareMinorMode 'Filter_Index_Updater' => {
  abbrev => 'flt_idx_up',
  configure => sub {
    my $top = ToplevelFrame();
    unless(CurrentFile()){
      QuestionQuery('Filter Index Updater'
                    ,'No opened file! Open a file and try again.'
                    ,'Ok');
      return;
    }

    if(ref FileName()){
      QuestionQuery('Filter Index Updater'
                    ,'Cannot operate on URI.! Open a file and try again.'
                    ,'Ok');
      return;
    }

    my ($v,$p,undef) = File::Spec->splitpath(FileName());
    $folder = File::Spec->catpath($v,$p);

    my $queries = get_queries($folder);
    foreach my $q (@$queries){
      $q->[2] =~ /.*query([0-9]+)/;
      push @$q,$1;
    }
    @$queries = sort { $a->[3] <=> $b->[3] } @$queries;
    my $queries_show = [map "$_->[0] ($_->[1])",@$queries];
    my @buttons = ('Add');
    if(@$queries){
      push @buttons,'Edit','Remove';
    }
    push @buttons,'Cancel';

    my $selected = [ $queries_show->[0] ];
    my $response;
    my $selection = ListQuery('Configure Filter Index Updater'
              ,'browse'
              ,$queries_show
              ,$selected
              ,{label => {-text => "Working folder: $folder"}
                ,dialog => {-buttons => \@buttons
                           # Fake button for the ListQuery to send back the selection
                           ,-command => sub { $response = $_[0]; $_[0] = 'OK'; }}});

    return if $response eq 'Cancel';

    if($response eq 'Remove'){
      if(QuestionQuery('Remove index',
                      "Do you really want to remove $queries_show->[$selection->[0]]",
                      'Yes','No') eq 'Yes'){
        my $num = $queries->[ $selection->[0] ]->[3];
        rmtree(File::Spec->catdir($folder,'.tred_filter_index',"query$num"));
        rmtree(File::Spec->catdir($folder,'.tred_filter_index',"index$num"))
          if -d File::Spec->catdir($folder,'.tred_filter_index',"index$num");
      }

    }elsif($response eq 'Add'){
      my $name;
      my $d = $top->DialogBox(-title => 'Add New Query'
                              ,-buttons=>['OK','Cancel']);
      my $f = $d->Frame()->pack(-side => 'top',-expand=>1,-fill=>'x');
      $f->Label(-text => 'New query details')->pack(-side => 'top');
      $f->Label(-text => "Working folder: $folder")->pack(-side => 'top');
      $f = $d->Frame()->pack(-side => 'top',-expand=>1,-fill=>'x');
      $f->Label(-text => 'Name:')->pack(-side => 'left');
      $f->Entry(-textvariable => \$name)->pack(-side => 'left',-expand=>1,-fill=>'x');
      $f = $d->Frame()->pack(-side => 'top',-expand=>1,-fill=>'x');
      $f->Label(-text => 'Mask:')->pack(-side => 'left');
      $f->Entry(-textvariable => \$mask)->pack(-side => 'left',-expand=>1,-fill=>'x');

      my $resp = $d->Show;
      $d->destroy;
      if($resp eq 'OK' and $mask and $name){
        my $num = @$queries ? $queries->[-1]->[3] + 1 : 0; # new query number is the last + 1
        if(! -d File::Spec->catdir($folder,'.tred_filter_index')){
          mkdir File::Spec->catdir($folder,'.tred_filter_index');
        }
        if(! -d File::Spec->catdir($folder,'.tred_filter_index',"query$num")){
          mkdir File::Spec->catdir($folder,'.tred_filter_index',"query$num");
        }
        if(-d File::Spec->catdir($folder,'.tred_filter_index',"index$num")){
          rmtree File::Spec->catdir($folder,'.tred_filter_index',"query$num");
        }
        open my $mask_fh,'>:utf8',File::Spec->catfile($folder,'.tred_filter_index',"query$num",'mask');
        print $mask_fh $mask;
        close $mask_fh;
        open my $name_fh,'>:utf8',File::Spec->catfile($folder,'.tred_filter_index',"query$num",'name');
        print $name_fh $name;
        close $name_fh;

        edit_query($num);

      }elsif($resp eq 'OK'){
        QuestionQuery('Add query'
                      ,'Name or mask not specified!',
                     ,'OK');
      }

    }elsif($response eq 'Edit'){
      my $num = $queries->[ $selection->[0] ]->[3];
      $mask = $queries->[ $selection->[0] ]->[1];
      edit_query($num);
    }
  },
  post_hooks => {
    after_save_hook => sub {
      # only files matching mask
      my $filename = FileName();
      my ($v,$p,undef) = File::Spec->splitpath($filename);
      my $dir = File::Spec->catpath($v,$p);
      my $indexdir = File::Spec->catfile($dir,'.tred_filter_index');
      if(-d $indexdir){
        foreach my $query_dir (glob File::Spec->catdir($dir,'.tred_filter_index','query*')){
          if(-f File::Spec->catfile($query_dir,'mask')
             and -f File::Spec->catfile($query_dir,'query.pml')){
            $query_dir =~ /.*query([0-9]+)/;
            my $num = $1;
            writeln $num;
            mkdir File::Spec->catdir($indexdir,"index$num")
              unless -d File::Spec->catdir($indexdir,"index$num");

            $mask = get_mask($query_dir);
            my $mask_re = $mask;
            $mask_re =~ s/([^[:alnum:]*?])/\\$1/g;
            $mask_re =~ s/\?/./g;
            $mask_re =~ s/\*/.*/g;
            if(File::Spec->case_tolerant){
              next if $filename !~ /$mask_re/i;
            }else{
              next if $filename !~ /$mask_re/;
            }

            my $sentence = CurrentTreeNumber();
            my $query_file = File::Spec->catfile($query_dir,'query.pml');
            my $query_fsfile = Treex::PML::Factory->createDocumentFromFile($query_file,{
	      backends => ['PML']
	    });
            my $query = $query_fsfile->tree(0);
            my $evaluator;
            my $out_filter;
            $evaluator =
              Tree_Query::BtredEvaluator->new($query, {current_file => 1});
            my $fh;
            $out_filter =
              {init => sub{
                 my (undef,undef,$basename) = File::Spec->splitpath($filename);
                 open $fh,'>:utf8',File::Spec->catfile($indexdir,"index$num",$basename.'.idx');
               },
               process_row => sub{
                 print $fh (join("\t",@{ $_[1] }),"\n");
               },
               finish => sub{
                 close($fh);
               }
              };
            $evaluator->init_filters($out_filter);
            while($evaluator->find_next_match){
              $evaluator->run_filters;
            }
            $evaluator->flush_filters;
            GotoTree($sentence);
          }
        }
      }
    }
  }
};

}
#endif filelist_filter
