context: .*
rootstyle: #{NodeLabel-skipempty:1}
node:<? '#{customparenthesis}' if $${is_parenthesis}
  ?><? $${nodetype}eq'root' ? '${id}' : '${t_lemma}'
  ?><? '#{customdetail}.${sentmod}'if$${sentmod}
  ?><? '#{customcoref}'.$PML_T::coreflemmas_hash{$${id}}
?>
node:<?
  ($${nodetype} eq 'root' ? '#{customnodetype}${nodetype}' :
  '#{customfunc}${functor}').
  "#{customsubfunc}".($${subfunctor}?".\${subfunctor}":'').($${is_state}?".\${is_state=state}":'') ?>
style:#{Node-width:7}#{Node-height:7}#{Node-currentwidth:9}#{Node-currentheight:9}
style:<? '#{Node-shape:'.($this->{is_generated}?'rectangle':'oval').'}'?>
style:<? exists $PML_T::show{$${id}} ?'#{Node-addwidth:10}#{Node-addheight:10}':''?>
style:<?
  if(($this->{functor}=~/^(?:PAR|PARTL|VOCAT|RHEM|CM|FPHR|PREC)$/) or
     ($this->parent and $this->parent->{nodetype}eq'root')) {
     '#{Line-width:1}#{Line-dash:2,4}#{Line-fill:'.CustomColor('line_normal').'}'
  } elsif ($${is_member}) {
    if (PML_T::IsCoord($this)and PML_T::IsCoord($this->parent)) {
      '#{Line-width:1}#{Line-fill:'.CustomColor('line_member').'}'
    } elsif ($this->parent and PML_T::IsCoord($this->parent)) {
      '#{Line-coords:n,n,(n+p)/2,(n+p)/2&(n+p)/2,(n+p)/2,p,p}#{Line-width:3&1}#{Line-fill:'.
       CustomColor('line_normal').'&'.CustomColor('line_member').'}'
    } else {
      '#{Line-fill:'.CustomColor('error').'}'
    }
  } elsif ($this->parent and PML_T::IsCoord($this->parent)) {
    '#{Line-width:1}#{Line-fill:'.CustomColor('line_comm').'}'
  } elsif (PML_T::IsCoord($this)) {
    '#{Line-coords:n,n,(n+p)/2,(n+p)/2&(n+p)/2,(n+p)/2,p,p}#{Line-width:1&3}#{Line-fill:'.
    CustomColor('line_member').'&'.CustomColor('line_normal').'}'
  } else {
    '#{Line-width:2}#{Line-fill:'.CustomColor('line_normal').'}'
  }
?>
style:<?
  if ($${tfa}=~/^[tfc]$/) {
    '#{Oval-fill:'.CustomColor('tfa_'.$${tfa}).'}${tfa}.'
  } else {
    '#{Oval-fill:'.CustomColor('tfa_no').'}'
  }
?>#{CurrentOval-width:3}#{CurrentOval-outline:<? CustomColor('current') ?>}

style: #{TextBg[2]-fill:#FFEEFF}
style: #{TextBg[3]-fill:#EEFFFF}

node:<?
my $line = "";
my $toggle = PML_T_Bridging::get_toggle_third_line();
if ($toggle == 1) {
  $line = '#{customnodetype}${nodetype}' if $${nodetype} ne 'root';
  $line .= '.#{customcomplex}${gram/sempos}' if $${gram/sempos};
}
elsif ($toggle == 2) {
  $line = '#{darkgreen}' . (PML_T::GetANodeByID($this->attr('a/lex.rf'))->attr('m/form')) if $this->attr('a/lex.rf');
  $line .= ' #{darkorange}' . join(' ', map { PML_T::GetANodeByID($_)->attr('m/form') } sort { my $aa = $a; $aa =~ s/.*-t([0-9]+)/\1/; my $bb = $b; $bb =~ s/.*-t([0-9]+)/\1/; $aa <=> $bb } ListV($this->attr('a/aux.rf'))) if $this->attr('a/aux.rf');
}
elsif ($toggle == 3) {
  $line = '#{darkorange}' . $${bbn_tag};
}
return $line;
?>

node:<? '#{'.NonDepRel_Common::get_color_bridging().'}'?><?
     NonDepRel_Common::get_show_bridging_arrow_type() ? (
       join "\n", map $_->{'informal-type'} . (NonDepRel_Common::get_hiding_src() ? '' : NonDepRel_Common::get_source_display_text($_->{'src'})), sort NonDepRel_Common::compare_target_nodes_positions_deepord grep {NonDepRel_Common::is_selected_bridging_and_coref_text_source($_->{'src'})} grep {defined and length} ListV($this->{bridging})
     ) : ()
?>

node:<? '#{'.NonDepRel_Common::get_color_bridging().'}'?><?
     NonDepRel_Common::get_show_bridging_arrow_comment() ? (
         join "\n", map $_->{comment} . (NonDepRel_Common::get_hiding_src() ? '' : NonDepRel_Common::get_source_display_text($_->{'src'})) . NonDepRel_Common::get_structured_comment_from_arrow_structure($_), sort NonDepRel_Common::compare_target_nodes_positions_deepord grep {NonDepRel_Common::is_selected_bridging_and_coref_text_source($_->{'src'})} grep {defined and length} ListV($this->{bridging})
     ) : ()
?>

node:<? '#{'.NonDepRel_Common::get_color_coref_text().'}'?><?
     NonDepRel_Common::get_show_coref_text_arrow_type() ? (
       join "\n", map $_->{'informal-type'} . (NonDepRel_Common::get_hiding_src() ? '' : NonDepRel_Common::get_source_display_text($_->{'src'})), sort NonDepRel_Common::compare_target_nodes_positions_deepord grep {NonDepRel_Common::is_selected_bridging_and_coref_text_source($_->{'src'})} grep {defined and length} ListV($this->{coref_text})
     ) : ()
?>

node:<? '#{'.NonDepRel_Common::get_color_coref_text().'}'?><?
     NonDepRel_Common::get_show_coref_text_arrow_comment() ? (
         join "\n", map $_->{comment} . (NonDepRel_Common::get_hiding_src() ? '' : NonDepRel_Common::get_source_display_text($_->{'src'})) . NonDepRel_Common::get_structured_comment_from_arrow_structure($_), sort NonDepRel_Common::compare_target_nodes_positions_deepord grep {NonDepRel_Common::is_selected_bridging_and_coref_text_source($_->{'src'})} grep {defined and length} ListV($this->{coref_text})
     ) : ()
?>

node:<? '#{darkgreen}'?><?
     NonDepRel_Common::get_show_coref_text_arrow_comment() ? (
         grep {defined and length} (NonDepRel_Common::get_node_anaph_str_comment($this))
     ) : ()
?>


hint:<?
   my @hintlines;
   if (ref($this->{gram})) {
     foreach my $gram (sort keys %{$this->{gram}}) {
       push @hintlines, "gram/".$gram." : ".$this->{gram}->{$gram} if $this->{gram}->{$gram}
     }
   }
   push@hintlines, "is_dsp_root : 1" if $${is_dsp_root};
   push@hintlines, "is_name_of_person : 1" if $${is_name_of_person};
   push@hintlines, "quot : ". join(",",map{$_->{type}}ListV($this->{quot})) if $${quot};
   join"\n", @hintlines
?>
