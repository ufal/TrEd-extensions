# -*- cperl -*-

#ifndef conll2009
#define conll2009

#include <contrib/pml/PML.mak>

=head1 NAME

Conll2009 - annotation context for Conll2009 ST data

=head1 DESCRIPTION

This file provides the basic annotation context for for
predicate-argument annotation on files with conll2009 PML schema.

=head1 USAGE

The stylesheet visualizes predicate-argument pairs as arcs from the
predicate to the argument; in the data representation, the arc is a
structure with attributes 'label' and 'target.rf' stored in the
'apreds' attribute of the argument node (the 'apreds' attribute is of
the list type).

=over 5

=item Annotation with mouse

Shift+click to mark a node as a predicate, then Ctrl+click on argument nodes and assign their labels.

The procedure of removing an argument is the same as adding one: to
remove an argument (arc), mark the predicate and Ctrl+click on the
argument.

Ctrl+double-click on arc to edit its label.

Note: if there is no mark, the argument and predicate are assumed to be the same node

=item Annotation with keyboard

Press space to mark a node.

Press f to make a new arc B<from> the marked node (predicate) to the current node (argument).

Press t to make a new arc from the current node (predicate) B<to> the marked node (argument).

Press r to (select and) remove arcs leading to the current node (argument).

=back

=head1 COPYRIGHT

Copyright (c) 2009,2010 by Petr Pajas and Jan Stepanek

=cut


{
package Conll2009;

#binding-context Conll2009
#bind space to EditAttributes

BEGIN { import TredMacro; }
use strict;

sub detect {
  return (((PML::SchemaName()||'') eq 'conll2009') ? 1 : 0);
}

push @TredMacro::AUTO_CONTEXT_GUESSING, sub {
  my ($hook)=@_;
  my $resuming = ($hook eq 'file_resumed_hook');
  my $current = CurrentContext();
  if (detect()) {
    SetCurrentStylesheet('conll2009') if $resuming;
    return 'Conll2009';
  }
  return;
};

sub allow_switch_context_hook {
  return 'stop' unless detect();
}
sub switch_context_hook {
  SetCurrentStylesheet('conll2009');
  Redraw() if GUI();
}

# Keyboard shortcuts for adding/removing arcs

Bind 'mark_this_node' => {
  key => 'space',
  menu => 'Mark current node',
};

Bind 'arc_to_marked' => {
  key => 't',
  menu => 'Add new "apreds" arc from current node to marked node',
};
Bind 'arc_from_marked' => {
  key => 'f',
  menu => 'Add new "apreds" arc from marked node to current node',
};
Bind 'select_and_remove_arcs' => {
  key => 'r',
  menu => 'Remove arcs targetted in the current node',
};

# mark node

our $markedNode;
sub mark_this_node {
  $markedNode = $this;
  ChangingFile(0); # no change in data
}

sub arc_to_marked {
  return unless $this and $markedNode and $markedNode->root == $this->root;
  add_arc($this,$markedNode);
}

sub arc_from_marked {
  return unless $this and $markedNode and $markedNode->root == $this->root;
  add_arc($markedNode,$this);
}

sub select_and_remove_arcs {
  # operate on the node passed as argument or the current node
  shift unless ref($_[0]);
  my $node = ref($_[0]) ? $_[0] : $this; 
  return unless $node;
  my @arcs = ListV($node->{apreds});
  return unless @arcs;
  if (@arcs==1) {
    # just one arc: remove it
    delete $node->{apreds};
    return;
  }

  # ask the user to select from a list of arcs those to remove
  @arcs = map { $_->{'label'}." - ".$_->{'target.rf'} } @arcs;
  my @sel = ($arcs[0]);
  ListQuery(q{Select 'apreds' arcs to remove},
	    'multiple',
	    \@arcs,
	    \@sel);
  for my $arc (@sel) {
    my ($label, $id) = split / - /, $arc;
    remove_arc($id, $node, $label);
  }
}


# hook that handles double-clicking on an arc
sub line_click_hook {
  my ($node,$tag,$button, $double,$modif, $ev)=@_;
  if ($node and $double and $button eq '1' and !$modif) {
    # the arc lines have a special tag of the form apreds:index:from_id+to_id (see the stylesheet)
    # which we use here to identify the arc
    if ($tag =~ /^apreds:(\d+):(.*)\+(.*)$/) {
      ToplevelFrame->afterIdle(MacroCallback([\&edit_arc,$node,$1]));
    }
  }
}

# Use Ctrl+click to create an arc from the marked node or itself
# Use Shift+click to mark a node (toggle)
sub node_click_hook {
  my ($node, $mod)=@_;
  if ($mod eq 'Shift') {
    if ($markedNode && $markedNode==$node) {
      undef $markedNode;
    } else {
      $markedNode = $node;
    }
    return 'stop';
  } elsif (defined($mod) and $mod =~ /^(Control|Control-3|-2)$/) {
    if ($markedNode and $node->root == $markedNode->root) {
      ToplevelFrame->afterIdle(MacroCallback([\&add_or_remove_arc,$markedNode,$node]));
      $this=$node;
      return 'stop';
    } else {
      $this=$node;
      ToplevelFrame->afterIdle(MacroCallback([\&add_or_remove_arc,$node,$node]));
      return 'stop';
    }
  }
  return;
}

# Use Ctrl+mouse drop to create or remove an arc
sub node_release_hook {
  my ($node,$target,$mod)=@_;
  return unless $target;
  if (defined($mod) and $mod =~ /^(Control|Control-3|-2)$/) {
    ToplevelFrame->afterIdle(MacroCallback([\&add_or_remove_arc,$node,$target]));
    return 'stop';
  }
  return;
}

# if an arc from node to target extists, remove it (ask the user first),
# otherwise create a new arc
sub add_or_remove_arc {
  my ($node,$target)=@_;
  if (grep { $node->{'xml:id'} eq $_ } $target->all('apreds/target.rf')) {
    my $resp = QuestionQuery(
      "Remove?",
      "There is an arc from $node->{'xml:id'} to $target->{'xml:id'} already.",
      "Remove","Cancel");
    if ($resp eq "Remove") {
      if (remove_arc($node,$target)) {
	ChangingFile(1);
	# Redraw();
	return;
      }
    }
  } elsif (add_arc($node,$target)) {
    ChangingFile(1);
    # Redraw();
    return;
  }
  ChangingFile(0);
}


# remove a given arc; if label is not given,
# all arcs from node to target are removed
sub remove_arc {
  my ($node,$target,$label)=@_;
  my $id = ref($node) ? $node->{'xml:id'} : $node;
  my @arcs = grep { not($_->{'target.rf'} eq $id
		      and
		    (!defined($label) or $_->{'label'} eq $label))
		  } ListV($target->{apreds});
  if (@arcs == 0) {
    delete $target->{apreds}
  } else {
    $target->{apreds}=Fslib::List->new_from_ref(\@arcs);
  }
  return 1;
}

# create a new arc
# label argument is optional, if not given, attribute editor is opened
# node can be either a FSNode or an ID
sub add_arc {
  my ($node, $target, $label)=@_;
  return unless $node and $target;
  my $arc = Fslib::Struct->new({
    'target.rf' => $node->{'xml:id'},
    'label' => $label,
  },1);
  unless (defined $label) {
    return unless edit_arc($target,$arc);
  }
  AddToList($target,'apreds', $arc);
  $node->{fillpred} = 'Y';
  return 1;
}

# arc can be either an index to node's apreds
# or a new Fslib::Struct value
sub edit_arc {
  my ($node,$arc) = @_;
  if (ref($arc)) {
    return EditAttribute($arc,"label",$node->type->find('apreds'))
  } else {
    return EditAttribute($node,"apreds/[$arc]/label");
  }
}

}
1;

#endif conll2009
