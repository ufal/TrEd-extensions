#!btred --context PML_T_Discourse -e transform_to_pmltq()
#-*- cperl -*-
# Author: Jiri Mirovsky

#ifndef NTRED
#include <tred.mac>
#endif

=item transform_to_pmltq

Adds some information to discourse files for usage in PMLTQ.  Namely, it:
- adds the surface sentence to the attribute 'sentence' at the root of each t-tree,
- adds the surface connective and surface extended connective to the attributes 'connective' and 'connective_ext', respectively, at each discourse arrow,
- adds all a-nodes that form a connective or connective_ext (be it as an analytical counterpart of a t-node connector or directly as an a-node connector) to the attributes 'all_a-connectors.rf' and 'all_a-connectors_ext.rf' at each discourse arrow,
- coppies the document-level attribute genre to each t-root,
- adds paragraph number to tree-root attribute tree_no, based on ids but counting from 1

=cut

package PML_T_Discourse;

use strict;
use warnings;

#encoding utf8
use utf8;
binmode STDIN, ':utf8';
binmode STDOUT, ':utf8';
binmode STDERR, ':utf8';

my ($directory) = @ARGV;

sub transform_to_pmltq {

  my $genre = get_document_genre();
  my $para_count = 0;
  my $para_id = "";

  foreach my $t_root (GetTrees()) {


    # setting the paragraph number

    my $id = $t_root->attr('id');
    # print STDERR "id: $id'\n";
    my $new_para_id = $1 if $id =~ /-p([^s]+)s\d+[A-Z]?$/;
    # print STDERR "new_para_id: $new_para_id\n";
    if ($new_para_id and $new_para_id ne $para_id) {
      $para_id = $new_para_id;
      $para_count++;
    }

    $t_root->set_attr('para_no', $para_count);


    # adding the sentence as a string

    my $sentence = PML_T::GetSentenceString($t_root);
    $sentence =~ s/\s+$//;
    $t_root->set_attr('sentence', $sentence);
    if (defined($genre)) {
      $t_root->set_attr('genre', $genre);
    }


    # processing discourse arrows

    foreach my $t_node (GetNodes($t_root)) {

      my @discourse_arrows = ListV($t_node->{'discourse'});
      foreach my $arrow (@discourse_arrows) { # take all discourse arrows starting at the given node
        my $connective = get_surface_connective($arrow);
        my $connective_ext = get_surface_connective_ext($arrow);
        $arrow->{'connective'} = $connective;
        $arrow->{'connective_ext'} = $connective_ext;
        # now get a-connectors and also analytical counterparts of t-connectors and create a list of all-a-connectors:
        my @all_a_connectors = ListV($arrow->{'a-connectors.rf'});
        foreach my $t_connector_id (ListV($arrow->{'t-connectors.rf'})) {
          my $t_connector = PML::GetNodeByID($t_connector_id);
          my $lex_counterpart_id = $t_connector->attr('a/lex.rf');
          my @aux_counterparts_ids = ListV($t_connector->attr('a/aux.rf'));
          push (@all_a_connectors, $lex_counterpart_id);
          push (@all_a_connectors, @aux_counterparts_ids);
        }
        $arrow->{'all_a-connectors.rf'} = List(@all_a_connectors);        
        # now the same for the eventual extended connective:
        my @all_a_connectors_ext = ListV($arrow->{'a-connectors_ext.rf'});
        foreach my $t_connector_id (ListV($arrow->{'t-connectors_ext.rf'})) {
          my $t_connector = PML::GetNodeByID($t_connector_id);
          my $lex_counterpart_id = $t_connector->attr('a/lex.rf');
          my @aux_counterparts_ids = ListV($t_connector->attr('a/aux.rf'));
          push (@all_a_connectors_ext, $lex_counterpart_id);
          push (@all_a_connectors_ext, @aux_counterparts_ids);
        }
        $arrow->{'all_a-connectors_ext.rf'} = List(@all_a_connectors_ext);        
      }

    }
  }

  print STDERR ".";
  ChangingFile(1);

} # transform_to_pmltq
