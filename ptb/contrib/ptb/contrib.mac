# -*- cperl -*-


#ifndef ptb
#define ptb

{
package Penn_Treebank;

#binding-context Penn_Treebank

#include <contrib/support/fold_subtree.inc>

#bind fold_subtree_toggle to space menu Fold/unfold current subtree (toggle)
#bind fold_subtree_unfold_all to Ctrl+space menu Unfold all in the current subtree

BEGIN { import TredMacro; }
use strict;

sub detect {
  return (((PML::SchemaName()||'') eq 'pennmrg') ? 1 : 0);
}

push @TredMacro::AUTO_CONTEXT_GUESSING, sub {
  my ($hook)=@_;
  my $resuming = ($hook eq 'file_resumed_hook');
  my $current = CurrentContext();
  if (detect()) {
#    SetCurrentStylesheet('Penn_Treebank') if $resuming;
    return __PACKAGE__;
  }
  return;
};

sub allow_switch_context_hook {
  return 'stop' unless detect();
}
sub switch_context_hook {
  if (GetCurrentStylesheet() eq STYLESHEET_FROM_FILE()) {
    SetCurrentStylesheet('Penn_Treebank');
  }
  Redraw() if GUI();
}

# prevent re-ordering by the order attribute (nonterminals are not ordered)
# Taken from tiger/contrib.mac
sub get_nodelist_hook {
    my ($fsfile, $tree_no, $current, $showHidden) = @_;
    my $tree = $fsfile->tree($tree_no);
    my @nodes = $tree->descendants;
    my @terminals =
        sort { $a->{order} <=> $b->{order} }
        grep { $_->{'#name'} eq 'terminal' } @nodes;

    my %order;
    @order{@terminals} = (0 .. $#terminals);
    my @nonterminals = grep { $_->{'#name'} eq 'nonterminal' } @nodes;

    my %span;
    for my $node ($tree, reverse @nodes) {
        next unless $node->parent;
        my $is_terminal = $node->{'#name'} eq 'terminal' ? 1 : 0;
        if (! $is_terminal ) {
            $order{$node} = ($order{$span{$node}[1]}
                             + $order{$span{$node}[0]}) / 2;
        }
        if (! $node->lbrother) {
            $span{$node->parent}[0] = $node; #$is_terminal ? $node : $span{$node}[0]
    }
        if (! $node->rbrother) {
            $span{$node->parent}[1] = $node; #$is_terminal ? $node : $span{$node}[1]
        }
    }

    return [[sort { $order{$a} <=> $order{$b} } ($tree, @nodes)], $current];
}

sub after_redraw_hook {
  my $treeview = shift;

  return unless $root->attr('mwes');

  # The same colours as those used in the annotation tool sem-ann, 
  # except for red for 'real mwes' - i.e. SemLex entries other than NEs
  my %mwe_colours = ( 
    lexeme      => 'red', #originally 'maroon'
    person      => 'olive drab',
    institution => 'hot pink',
    location    => 'turquoise1',
    object      => 'plum',
    address     => 'light slate blue',
    time        => 'lime green',
    biblio      => '#8aa3ff',
    foreign     => '#8a535c',
    number      => 'orange1'
  );
  my @stipples = (qw(dense1 dense2 dense5 dense6));

  my @groups;
  my @group_colors;
  my @group_stipples;
  
  foreach my $snode ( ListV( $root->attr('mwes') || ()) ) {
    my $mwe_type = $snode->{type};
    my @group = map { PML::GetNodeByID($_) } ListV( $snode->{'terminal.rfs'} );
    push @groups, [@group];
    push @group_colors, 'red';
    push @group_stipples, 'dense1';
  }

  TrEd::NodeGroups::draw_groups(
    $grp,
    \@groups,
    {
      colors   => \@group_colors,
      stipples => \@group_stipples,
      group_line_width => 20
    }
  );
}

}
1;

#endif ptb
