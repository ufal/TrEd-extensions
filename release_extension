#! /bin/bash -e

function make_zip () {
    z="$1"
    d="$2"
    pushd "$d" > /dev/null
    rm -f "$z"

    touch "$z"
    if
	! zip -9 \
	    "${z}.part" \
	    `find -L -not -wholename "*/.svn*"` \
	    -x '*~' \
	    -x '#*'
    then
	rm -f "$z"
	rm -f "${z}.part"
	echo "Failed to create package $z!" >&2
	exit 1
    fi
    chmod --reference="$z" "${z}.part"
    mv "${z}.part" "$z"
    popd > /dev/null
}


function exit_rm () {
    rm -rf "$tmp"
    exit 1
}


function version_newer () {
    old=$1
    new=$2

    _IFS=$IFS
    IFS=.
    old_split=($old)
    new_split=($new)
    IFS=$_IFS

    for i in 0 1 2 ; do
        if (( old_split[i] < new_split[i] )) ; then 
            return 0
        elif (( old_split[i] > new_split[i] )) ; then
            return 1
        fi
    done
    return 1
}


function get_size () {
    du -L -sb --exclude '*/.svn*' --exclude '*~' --exclude '#*' "$dir" | cut -f1
}



if ((! $# )) || [[ $1 =~ --?h.* ]]; then
    cat << '__HELP__'
release_extension -u URL -m METHOD -r REMOTE [ -n NAME ] -d DIR -p VALIDATE
    URL :     URL of the extension repository.
    REMOTE:   The target url or directory (depends on METHOD).
    NAME:     Name of the extension. If not given, equals to DIR.
    DIR:      The dir containing the extension to release.
    VALIDATE: Full path to pml_validate (if not in $PATH).
    METHOD:   How the REMOTE dir should be reached?
              's' for sshfs, 'r' for rsync, 'l' for local (default).
__HELP__
    exit
fi


while getopts 'u:r:n:d:p:m:' option ; do
    case $option in
        (u) url=$OPTARG ;;
        (r) remote=$OPTARG ;;
        (n) name=$OPTARG ;;
        (d) dir=$OPTARG ;;
        (p) validate=$OPTARG ;;
        (m) method=$OPTARG ;;
        (*) exit 1 ;;
    esac
done
if [[ ${!OPTIND} ]] ; then
    echo Invalid argument ${!OPTIND} >&2
    exit 1
fi
if [[ -z $remote ]] ; then
    echo Remote not specified >&2
    exit 1
fi
if [[ -z $dir ]] ; then
    echo Dir not specified >&2
    exit 1
fi
dir=${dir%/}

# Set default values
: ${url:=http://ufal.mff.cuni.cz/tred/extensions/external}
#: ${remote:=ufal:/usr/share/drupal7/legacy/tred/extensions/external}
: ${validate:=pml_validate}
: ${method:=l}
if [[ -z $name ]] ; then
    name=${dir##*/}
fi


bindir=$(readlink -f ${0%/*})
meta="$dir"/package.xml

(
    shopt -s nullglob
    xmllint --noout  "$meta" "$dir"/resources/*.xml
)

if which $validate &>/dev/null && $validate -c &>/dev/null; then
    if ! $validate -p "$bindir/../tred/resources" "$meta"; then
	which $validate
	echo $validate -p "$bindir/../tred/resources" "$meta" >&2
	echo "Package meta file $meta is not a valid PML tred_package instance!" >&2
	exit 1
    fi
else
    echo "WARNING: will not validate package.xml (PML validator pml_validate not found in PATH or not working)" >&2
fi

pkgname=$(xmllint --shell "$meta" <<<'cat //*[name()="pkgname"]/text()' | sed -n 3p)
if [[ $pkgname != $name ]] ; then
    echo "Invalid package name: $pkgname != $name." >&2
    exit 1
fi

repository=$(xmllint --shell "$meta" <<<'cat //*[name()="repository"]/@href' \
    | grep 'href=')
repository=${repository## }
repository=${repository%[\"\']}
repository=${repository%/}
if [[ $repository != href=[\'\"]${url%/} ]] ; then
    echo 'Repository reference does not match url:' \
        $'\n'"$repository vs. $url." >&2
    exit 1
fi

icon=$(perl -ne 'print $1 if m{<icon>([^<]+)</icon>}' "$meta" /dev/null)
if [[ $icon ]] ; then
    echo "Icon $icon" >&2
else
    echo Icon not found. >&2
fi

size=
s=$(get_size)
while [[ $s != "$size" ]] ; do
    size=$s
    echo "Updating install size to: $size" >&2
    perl -MXML::LibXML -e '
      ($f, $size) = @ARGV;
      $p = XML::LibXML->new->parse_file($f);
      if ($p->documentElement->getAttribute("install_size") != $size) {
          $p->documentElement->setAttribute("install_size", "$size");
          rename $f, $f . "~";
          $p->toFile($f);
      }' \
          "$meta" $size;

  s=$(get_size)
done

tmp=$(mktemp --tmpdir -d)
found=1
wget -qO "$tmp"/old.zip "$url/$name".zip || found=0
if ((found)) ; then
    mkdir "$tmp"/old
    unzip -qd "$tmp"/old "$tmp"/old.zip
    sed -i 's, install_size="[0-9]*",,g' "$tmp"/old/package.xml
fi
make_zip "$tmp"/new.zip "$dir" > /dev/null
mkdir "$tmp"/new
unzip -qd "$tmp"/new "$tmp"/new.zip
sed -i.~size~ 's, install_size="[0-9]*",,g' "$tmp"/new/package.xml

up_to_date=1
if ((!found)) || diff -Nur "$tmp/old" "$tmp/new" | grep -q . ; then
    up_to_date=0
fi
if ((up_to_date)) ; then
    echo PACKAGE "$name" IS UP-TO-DATE >&2
    exit_rm
fi
mv "$tmp"/new/package.xml{.~size~,}
script='print $1 if m{<version>([0-9.]+)</version>}'
prev_ver=$(perl -ne "$script" "$tmp/old/package.xml" /dev/null)
pkg_ver=$(perl -ne "$script" "$meta")
rm -rf "$tmp"/old
if [[ -n $prev_ver && -n $pkg_ver ]] ; then
    if [[ $prev_ver == $pkg_ver ]]; then
        echo Version $pkg_ver not changed. >&2
        exit_rm
    elif version_newer $pkg_ver $prev_ver ; then
        echo New version $pkg_ver precedes the old version $prev_ver. >&2
        exit_rm
    else
        echo Version change: "$prev_ver -> $pkg_ver" >&2
    fi
elif [[ -z $pkg_ver ]] ; then
    echo No version specified. >&2
    exit_rm
fi

zip_size=$(du -sb "$tmp/new.zip" | cut -f1)
echo "Zip size: $zip_size" >&2
perl -MXML::LibXML -e '
  $f = shift;
  print STDERR "File: $f\n";
  $p = XML::LibXML->new->parse_file($f);
  $p->documentElement->setAttribute("package_size","'$zip_size'");
  $p->toFile($f);
' "$tmp/new/package.xml"

wget -qO "$tmp"/extensions.lst "$url"/extensions.lst
if grep -Eq "^!? *$name *$" "$tmp"/extensions.lst ; then
    echo $name already in list. >&2
else
    echo Adding $name to list. >&2
    echo "$name" >> "$tmp"/extensions.lst
fi

mkdir "$tmp"/remote

if [[ $method == s ]] ; then
    echo Transfering "$tmp/remote" to "$remote"... >&2
    sshfs "$remote" "$tmp"/remote
else
    cp "$tmp"/extensions.lst "$tmp"/remote/
fi

new="$name.$HOSTNAME.$USER.$$"
[[ -d "$tmp"/remote/"$new" ]] && rm -rf "$tmp"/remote/"$new"
mkdir "$tmp"/remote/"$new"
if [[ -f "$tmp/new/$icon" ]] ; then
    mkdir "$tmp"/remote/"$new"/icons/
fi
cp                                          "$tmp"/new/package.xml              "$tmp"/remote/"$new"/
[[ -f "$tmp/new/$icon" ]]          && cp    "$tmp"/new/"$icon"                  "$tmp"/remote/"$new"/icons/
[[ -d "$tmp"/new/documentation ]]  && cp -r "$tmp"/new/documentation            "$tmp"/remote/"$new"/
cp                                          "$tmp"/extensions.lst               "$tmp"/remote/extensions.lst."$new"
cp                                          "$tmp"/new.zip                      "$tmp"/remote/"$name".zip."$new"

[[ -f "$tmp"/remote/"$name".zip ]] && cp    "$tmp"/remote/"$name".zip           "$tmp"/remote/old-"$new".zip
[[ -f "$tmp"/remote/"$name".zip ]] && rm    "$tmp"/remote/"$name".zip
mv                                          "$tmp"/remote/"$name".zip."$new"    "$tmp"/remote/"$name".zip

[[ -d "$tmp"/remote/"$name" ]]     && mv    "$tmp"/remote/"$name"               "$tmp"/remote/old-"$new"
mv                                          "$tmp"/remote/"$new"                "$tmp"/remote/"$name"
rm -rf                                      "$tmp"/remote/old-"$new"

cp                                          "$tmp"/remote/extensions.lst        "$tmp"/remote/extensions.lst.old-"$new"

# Cannot mv here: permission denied if the owner is someone else
mv                                          "$tmp"/remote/extensions.lst."$new" "$tmp"/remote/extensions.lst \
|| ( rm "$tmp"/remote/extensions.lst && mv  "$tmp"/remote/extensions.lst."$new" "$tmp"/remote/extensions.lst )

rm -f "$tmp"/remote/old-"$new".zip "$tmp"/remote/extensions.lst.old-"$new"

case $method in
    (s) fusermount -u "$tmp"/remote ;;
    (l) cp -r "$tmp"/remote "$remote"/ ;;
    (r) echo 'Running rsync...' >&2
        rsync -avr "$tmp"/remote/ "$remote" || echo Ignoring friendly errors ;;
esac

rm -rf "$tmp"
echo "Package $zip successfully created!" >&2

# Verify
wget -q "$url/$name/package.xml" -O- | grep -F "<version>$pkg_ver</version>" || {
    echo "$pkg_ver" not found in online package.xml >&2
    exit_rm
}
size=$(wget -q -O- "$url/$name.zip" | wc -c)
((size == zip_size)) || {
    echo Uploaded zip has a different size >&2
    exit_rm
}
