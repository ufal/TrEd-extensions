#!/usr/bin/ntred

package TredMacro;

use PMLInstance;

use Encode;

use File::Basename;

use strict;


our ($root, $this);

our ($syntax, $schema, $order);


sub autostart {

    my ($name, $path, undef) = File::Basename::fileparse(FileName(), '.morpho.xml');

    my $data = '<?xml version="1.0" encoding="utf-8"?>
                <Analytic xmlns="http://ufal.mff.cuni.cz/pdt/pml/">
                  <head>
                    <schema href="syntax.schema.xml" />
                  </head>
                  <meta>
                    <revision>$' . 'Revision: ' . '$</revision>
                    <date>$' . 'Date: ' . '$</date>
                  </meta>
                  <data />
                </Analytic>';                                   # "

    $syntax = PMLInstance->load({ 'string' => $data, 'filename' => $path . '/' . $name . '.syntax.xml' })->convert_to_fsfile();

    $schema = $syntax->metaData('schema');

    my $index;

    do {

        pretty_para($root, $syntax->new_tree($index++)) if $root->{'#name'} eq 'Paragraph';
    }
    while NextTree();

    $syntax->writeFile();
}


sub pretty_para {

    my ($root, $tree) = @_;

    my @id = $root->{'id'} =~ /^m-p([0-9]+)$/;

    $tree->set_type_by_name($schema, 'Tree.type');

    $tree->{'#name'} = 'Tree';

    $tree->{'ord'} = $order = 0;

    $tree->{'id'} = sprintf 's-p%d', @id;

    $tree->{'afun'} = 'AuxS';

    $tree->{'form'} = $root->{'form'} if exists $root->{'form'};

    pretty_word($_, $tree) foreach $root->children();

    # my @log;

    # $tree->validate_subtree(\@log);

    # warn join "\n", @log if @log;
}


sub pretty_word {

    my ($word, $tree) = @_;

    my @id = $word->{'id'} =~ /^m-p([0-9]+)w([0-9]+)$/;

    my @child = $word->children();

    if (@child) {

        foreach my $child (@child) {

            pretty_node($_, $tree) foreach $child->children();
        }
    }
    else {

        my $node = new FSNode;

        $node->set_type_by_name($schema, 'Node.type');

        $node->{'#name'} = 'Node';

        $node->{'ord'} = ++$order;

        $node->{'id'} = sprintf 's-p%dw%d', @id;

        $node->{'afun'} = '???';

        $node->{'morpho'} = new Fslib::Struct;

        $node->{'morpho'}{'Word'} = new Fslib::Struct;

        foreach (qw 'form note') {

            $node->{'morpho'}{'Word'}{$_} = $word->{$_} if exists $word->{$_};
        }

        PasteNode($node, $tree, $syntax->FS);
    }
}


sub pretty_node {

    my ($word, $tree) = @_;

    my @id = $word->{'id'} =~ /^m-p([0-9]+)w([0-9]+)l([0-9]+)t([0-9]+)$/;

    my $node = new FSNode;

    $node->set_type_by_name($schema, 'Node.type');

    $node->{'#name'} = 'Node';

    $node->{'ord'} = ++$order;

    $node->{'id'} = sprintf 's-p%dw%dl%dt%d', @id;

    $node->{'afun'} = '???';

    $node->{'morpho'} = new Fslib::Struct;

    $node->{'morpho'}{'Token'} = new Fslib::Struct;

    foreach (qw 'morphs tag form gloss note') {

        $node->{'morpho'}{'Token'}{$_} = $word->{$_} if exists $word->{$_};
    }

    $word = $word->parent();

    $node->{'morpho'}{'Lexeme'} = new Fslib::Struct;

    foreach (qw 'root core form note') {

        $node->{'morpho'}{'Lexeme'}{$_} = $word->{$_} if exists $word->{$_};
    }

    if ($id[2] == 1) {

        $word = $word->parent();

        $node->{'morpho'}{'Word'} = new Fslib::Struct;

        foreach (qw 'form note') {

            $node->{'morpho'}{'Word'}{$_} = $word->{$_} if exists $word->{$_};
        }
    }

    PasteNode($node, $tree, $syntax->FS);
}
