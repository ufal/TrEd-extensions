# -*- perl -*- ############################################################# Otakar Smrz, 2004/07/17
#
# migrate_annotation_others.btred ####################################################### 2007/02/17

# $Id: migrate_annotation_others.btred 469 2008-01-18 00:16:02Z smrz $

our $VERSION = do { q $Revision: 469 $ =~ /(\d+)/; sprintf "%4.2f", $1 / 100 };


package TredMacro;

use Algorithm::Diff;

use List::Util 'reduce';

use File::Spec;
use File::Basename;


our $entities;
our $nodes;


sub path (@) {

    return File::Spec->join(@_);
}


sub autostart {

    my $anno = Treex::PML::Factory->createDocument({'encoding' => "utf8"});

    my $thisfile = File::Spec->canonpath(FileName());

    ($name, $path, $exts) = File::Basename::fileparse($thisfile, qr '\.morpho(?:\.exclude)?\.fs');
    (undef, $path, undef) = File::Basename::fileparse((substr $path, 0, -1), '');

    $anno->readFile(path $path . 'others', $name . '.others.fs');

    $entities = [ [], [] ];

    $entities->[0] = [ grep { $_->{'type'} eq 'entity' } $grp->{FSFile}->trees() ];

    $entities->[1] = reduce { $b->{'morph'} =~ /^-+[^-]/ && @{$a} && $a->[-1]->[-1]->{'morph'} =~ /-$/

                                            ? do { push @{$a->[-1]}, $b; $a }

                                            : do { push @{$a}, [$b]; $a } }
                            [],

                            map { map { retokenize($_) }

                                  grep { $_->{'morph'} ne '' and $_->{'form'} !~ /^\*(?:[A-Z0-9]+\*)?$/ }

                                  @{($anno->nodes($_))[0]} } 0 .. $anno->lastTreeNo();

    Algorithm::Diff::traverse_sequences(@{$entities}, { 'MATCH' => \&entity_annotation,
                                                        'DISCARD_A' => \&qg_annotation }, \&entity_ident);

    ChangingFile(1);
}


sub retokenize {

    my $node = $_[0];

    $node->{'tag_2'} =~ s/X$/D/;

    return $node unless $node->{'tag_2'} =~ /^V...F/;

    my $copy = $grp->{FSFile}->FS()->clone_node($node);

    $node->{'morph'} =~ /^(sa)\+(.+)$/;
    $copy->{'morph'} = $1 . '-';
    $node->{'morph'} = '-' . $2;

    $node->{'origf'} =~ /^(.)(.+)$/;
    $copy->{'origf'} = $1;
    $node->{'origf'} = $2;

    $node->{'form'} =~ /^(..)(.+)$/;
    $copy->{'form'} = $1;
    $node->{'form'} = $2;

    $copy->{'tag_2'} = 'F---------';

    substr $node->{'tag_2'}, 4, 1, '-';

    return $copy, $node;
}


sub entity_annotation {

    return if $entities->[0][$_[0]]->{'apply_m'} > 0;

    $nodes = [ [ $entities->[0][$_[0]] ], [ $entities->[1][$_[1]] ] ];

    migrate_annotation(0, 0);
}


sub normalize ($) {

    my $text = $_[0];

    $text =~ tr[\x{064B}-\x{0652}\x{0670}][]d;

    $text =~ s/(^| )\x{0644} [\x{0671}\x{0627}]\x{0644}\x{0644}?/$1\x{0644}\x{0644}/;   # llrjAl wllylp

    $text =~ tr[ ][]d;

    $text =~ tr[\x{0622}\x{0623}\x{0625}\x{0671}][\x{0627}];    # [|OI{][A]

    $text =~ tr[\x{0629}\x{0649}][\x{062A}\x{064A}];            # [pY][ty]

    $text =~ tr[\x{0624}\x{0626}][\x{0621}];                    # [W}][']

    return $text;
}


sub entity_ident {

    if (ref $_[0] eq 'ARRAY') {

        return normalize join " ", map { $_->{'origf'} } @{$_[0]};
    }
    else {

        return normalize $_[0]->{'input'};
    }
}


sub partition_ident {

    if (ref $_[0] eq 'ARRAY') {

        return join " ", map { $_->{'origf'} } @{$_[0]};
    }
    else {

        return $_[0]->{'form'};
    }
}


sub token_ident {

    return exists $_[0]->{'origf'} ? $_[0]->{'origf'} : $_[0]->{'form'};
}


sub migrate_annotation {

    $this = $nodes->[0][$_[0]];
    $root = $nodes->[0][$_[0]]->root();

    if ($nodes->[0][$_[0]]->{'type'} eq 'entity') {

        local $nodes = [ [ $nodes->[0][$_[0]]->children() ], [ $nodes->[1][$_[1]] ] ];

        Algorithm::Diff::traverse_sequences(@{$nodes}, { 'MATCH' => \&migrate_annotation }, \&partition_ident);
    }
    elsif ($nodes->[0][$_[0]]->{'type'} eq 'partition') {

        local $nodes = [ [ $nodes->[0][$_[0]]->children() ], [ @{$nodes->[1][$_[1]]} ] ];

        Algorithm::Diff::traverse_sequences(@{$nodes}, { 'MATCH' => \&migrate_annotation }, \&token_ident);
    }
    elsif ($nodes->[0][$_[0]]->{'type'} eq 'token_form') {

        PADT::Morpho::restrict_hide($nodes->[1][$_[1]]->{'tag_2'},
                                   $nodes->[1][$_[1]]->{'tag_2'} =~ /^(?:\-{10})?$/ ? 'remove inherited' : () );

        local $nodes = [ [ grep { $_->{'tips'} ne '0' } $nodes->[0][$_[0]]->children() ], [ $nodes->[1][$_[1]] ] ];

        migrate_annotation($_, 0) foreach 0 .. @{$nodes->[0]} - 1;
    }
    elsif ($nodes->[0][$_[0]]->{'type'} eq 'lemma_id') {

        local $nodes = [ [ grep { $_->{'hide'} ne 'hide' } $nodes->[0][$_[0]]->children() ], [ $nodes->[1][$_[1]] ] ];

        migrate_annotation($_, 0) foreach 0 .. @{$nodes->[0]} - 1;
    }
    elsif ($nodes->[0][$_[0]]->{'type'} eq 'token_node') {

        return if $nodes->[0][$_[0]]->{'form'} ne $nodes->[1][$_[1]]->{'form'} or
                  $nodes->[1][$_[1]]->{'tag_2'} =~ /^(?:\-{10})?$/;

        return if inconsistent_pronoun($nodes->[0][$_[0]]);

        PADT::Morpho::annotate_morphology('click') unless $nodes->[0][$_[0]]->{'apply_m'} > 0;
    }
    else {

        warn "Never the case ...";
    }
}


sub inconsistent_pronoun {

    my $node = $_[0];

    return unless $node->{'tag'} =~ /^S\-/;

    local $this = $node;

    $this = $this->parent();

    return if $node->{'tag'} =~ /^S----...1-$/ and $this->{'id'} ne 'PRONOUN';

    $this = $this->parent();

    PADT::Morpho::ctrl_currentLeftWholeLevel();

    PADT::Morpho::follow_apply_m_down();
    PADT::Morpho::follow_apply_m_down();

    return if $node->{'tag'} =~ /^S----...2-$/ and $node->parent()->{'id'} eq 'PRONOUN' and
              $this->{'tag'} =~ /^[^VCF]/;

    return if $node->{'tag'} =~ /^S----...4-$/ and $node->parent()->{'id'} eq 'PRONOUN' and
              $this->{'tag'} =~ /^[VCF-]/;

    return 'inconsistent';
}


sub qg_annotation {

    return if $entities->[0][$_[0]]->{'apply_m'} > 0;

    $this = $entities->[0][$_[0]];
    $root = $entities->[0][$_[0]]->root();

    PADT::Morpho::move_to_fork();

    return unless $this->{'type'} eq 'token_node';

    PADT::Morpho::annotate_morphology('click') if $this->{'tag'} =~ /^[QG]---------$/;
}
