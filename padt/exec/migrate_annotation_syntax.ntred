# -*- perl -*- ############################################################# Otakar Smrz, 2004/08/02
#
# migrate_annotation_syntax.ntred ####################################################### 2004/09/19

# $Id: migrate_annotation_syntax.btred 469 2008-01-18 00:16:02Z smrz $

our $VERSION = do { q $Revision: 469 $ =~ /(\d+)/; sprintf "%4.2f", $1 / 100 };


package TredMacro;

use Algorithm::Diff;


our @annotes = qw "afun score arabfa clause coref note parallel paren";

our $mapping;

our $nodes;


sub autostart {

    my $anno = Treex::PML::Instance->load({ 'filename' => FileName() . '.anno.xml' })->convert_to_fsfile();;

    $nodes = [ [], [] ];

    $mapping = {};

    @{$nodes->[0]} = map { @{($grp->{FSFile}->nodes($_))[0]} } 0 .. $grp->{FSFile}->lastTreeNo;
    @{$nodes->[1]} = map { @{($anno->nodes($_))[0]} } 0 .. $anno->lastTreeNo;

    Algorithm::Diff::traverse_balanced(@{$nodes}, { 'MATCH' => \&record_mappings,
                                                    'CHANGE' => \&record_mappings }, \&node_ident);

    migrate_annotation();

    ChangingFile(1);
}


sub migrate_annotation {

    return unless keys %{$mapping};

    my ($parent, $i);

    for ($i = 0; $i < @{$nodes->[0]}; $i++) {

        if (exists $mapping->{$nodes->[0][$i]}) {

            foreach (@annotes) {

                next if $nodes->[0][$i]->{'#name'} eq 'Tree' and $_ eq 'note';

                $this = $nodes->[0][$i];

                warn "-> " . "\t" . ThisAddress() . "\t" . ( defined $this->{'afun'} ? $this->{'afun'} : '???' ) .
                             "\t" . $_ . "\t" . $this->{$_} . "\t" . $mapping->{$this}->{$_} . "\n"
                    if defined $this->{$_} and $this->{$_} ne $mapping->{$this}->{$_} and ( $_ ne 'afun' or $this->{'afun'} ne '???' );

                $nodes->[0][$i]->{$_} = $mapping->{$nodes->[0][$i]}->{$_};
            }

            if (node_ident($nodes->[0][$i]) eq node_ident($mapping->{$nodes->[0][$i]})) {

                if ($parent = $mapping->{$nodes->[0][$i]}->parent() and exists $mapping->{$parent}) {

                    if (grep { $_ eq $mapping->{$parent} } $nodes->[0][$i]->descendants()) {

                        CutPaste($mapping->{$parent}, $nodes->[0][$i]->root());
                    }

                    CutPaste($nodes->[0][$i], $mapping->{$parent});
                }
                elsif ($nodes->[0][$i]->{'#name'} ne 'Tree') {

                    $nodes->[0][$i]->{'score'} = Treex::PML::Factory->createAlt();

                    unshift @{$nodes->[0][$i]->{'score'}}, Treex::PML::Factory->createContainer() $nodes->[0][$i]->{'afun'};

                    $nodes->[0][$i]->{'afun'} = '???';

                    $this = $nodes->[0][$i];

                    $form = exists $this->{'morpho'}{'Token'} ? $this->{'morpho'}{'Token'}{'form'} :
                            exists $this->{'morpho'}{'Word'} ? $this->{'morpho'}{'Word'}{'form'} : $this->{'form'};

                    warn ">< " . "\t" . ThisAddress() . "\t" . ( defined $this->{'afun'} ? $this->{'afun'} : '???' ) .
                                 "\t" . '...' . "\t" . $form . "\n";
                }
            }
            else {

                if ($parent = $mapping->{$nodes->[0][$i]}->parent() and exists $mapping->{$parent}) {

                    if (grep { $_ eq $mapping->{$parent} } $nodes->[0][$i]->descendants()) {

                        CutPaste($mapping->{$parent}, $nodes->[0][$i]->root());
                    }

                    CutPaste($nodes->[0][$i], $mapping->{$parent});
                }

                $nodes->[0][$i]->{'score'} = Treex::PML::Factory->createAlt();

                unshift @{$nodes->[0][$i]->{'score'}}, Treex::PML::Factory->createContainer() $nodes->[0][$i]->{'afun'};

                $nodes->[0][$i]->{'afun'} = '???';

                $this = $nodes->[0][$i];

                $form = exists $this->{'morpho'}{'Token'} ? $this->{'morpho'}{'Token'}{'form'} :
                        exists $this->{'morpho'}{'Word'} ? $this->{'morpho'}{'Word'}{'form'} : $this->{'form'};

                warn "<> " . "\t" . ThisAddress() . "\t" . ( defined $this->{'afun'} ? $this->{'afun'} : '???' ) .
                             "\t" . '...' . "\t" . $form . "\n";
            }
        }
        else {

            $this = $nodes->[0][$i];

            $form = exists $this->{'morpho'}{'Token'} ? $this->{'morpho'}{'Token'}{'form'} :
                    exists $this->{'morpho'}{'Word'} ? $this->{'morpho'}{'Word'}{'form'} : $this->{'form'};

            warn "-- " . "\t" . ThisAddress() . "\t" . ( defined $this->{'afun'} ? $this->{'afun'} : '???' ) .
                         "\t" . '...' . "\t" . $form . "\n";
        }
    }
}


sub record_mappings {

    $mapping->{$nodes->[0][$_[0]]} = $nodes->[1][$_[1]];
    $mapping->{$nodes->[1][$_[1]]} = $nodes->[0][$_[0]];
}


sub node_ident {

    return $_[0]->{'#name'} eq 'Tree' ? '#root#' : exists $_[0]->{'morpho'}{'Word'} ? $_[0]->{'morpho'}{'Word'}{'form'} : '';
}
