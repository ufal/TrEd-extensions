# -*- perl -*- ############################################################# Otakar Smrz, 2004/08/02
#
# migrate_annotation_condep.btred ####################################################### 2004/09/19

# $Id: migrate_annotation_condep.btred 492 2008-02-21 22:31:54Z smrz $

our $VERSION = do { q $Revision: 492 $ =~ /(\d+)/; sprintf "%4.2f", $1 / 100 };


package TredMacro;

use Algorithm::Diff;

use File::Spec;
use File::Basename;


our @annotes = qw "afun afunaux arabclause arabfa arabspec comment parallel paren";
our @changes = qw "form lemma tag x_input";

our $mapping;

our $nodes;


sub path (@) {

    return File::Spec->join(@_);
}


sub novocalize ($) {

    my $text = $_[0];

    $text =~ tr[\x{064B}-\x{0652}\x{0670}][]d;

    return $text;
}


sub autostart {

    my $anno = Treex::PML::Factory->createDocument({'encoding' => "utf8"});

    my $thisfile = File::Spec->canonpath(FileName());

    ($name, $path, undef) = File::Basename::fileparse($thisfile, '.(?:syntax|condep).fs');
    (undef, $path, undef) = File::Basename::fileparse((substr $path, 0, -1), '');

    $anno->readFile(path $path, 'morpho', $name . '.morpho.fs');

    $nodes = [ [], [] ];

    $mapping = {};

    @{$nodes->[0]} = map { @{($grp->{FSFile}->nodes($_))[0]} } 0 .. $grp->{FSFile}->lastTreeNo;
    @{$nodes->[1]} = grep { not $_->children() } map { @{($anno->nodes($_))[0]} } 
                     grep { $anno->tree($_)->{'type'} eq 'paragraph' } 0 .. $anno->lastTreeNo;

    print @{$nodes->[0]} . " " . @{$nodes->[1]} . "\n";

    Algorithm::Diff::traverse_balanced(@{$nodes}, { 'MATCH' => \&record_mappings,
                                                    'CHANGE' => \&record_mappings }, \&node_ident);

    migrate_annotation();

    ChangingFile(1);
}


sub migrate_annotation {

    return unless keys %{$mapping};

    my ($parent, $i);

    for ($i = 0; $i < @{$nodes->[0]}; $i++) {

        if (exists $mapping->{$nodes->[0][$i]}) {

	    $this = $nodes->[0][$i];

	    foreach (qw "tag form") {

		# print join "\t", $this->{$_}, $mapping->{$nodes->[0][$i]}->{$_} . "\n" if $this->{$_} ne $mapping->{$nodes->[0][$i]}->{$_};

		$this->{$_} = $mapping->{$nodes->[0][$i]}->{$_};
	    }

	    foreach (qw "morph gloss comment") {

		# print join "\t", $this->{$_}, $mapping->{$nodes->[0][$i]}->{$_} . "\n" if $this->{$_} ne $mapping->{$nodes->[0][$i]}->{$_};

		$this->{'x_' . $_} = $mapping->{$nodes->[0][$i]}->{$_};
	    }

	    $this->{'origf'} = $mapping->{$nodes->[0][$i]}->{'type'} eq "token_node" 
                                   ? $mapping->{$nodes->[0][$i]}->parent()->lbrother() ? '' : $mapping->{$nodes->[0][$i]}->parent()->parent()->{'input'} 
                                   : $mapping->{$nodes->[0][$i]}->{'input'};

	    $this->{'lemma'} = $mapping->{$nodes->[0][$i]}->{'type'} eq "token_node" 
                                   ? $mapping->{$nodes->[0][$i]}->parent()->{'form'} . '_' . $mapping->{$nodes->[0][$i]}->parent()->{'id'}
                                   : '';	    
	}
        else {

            $this = $nodes->[0][$i];

            warn "-- " . "\t" . ThisAddress() . "\t" . ( defined $this->{'afun'} ? $this->{'afun'} : '???' ) .
                 "\t" . '...' . "\t" . $this->{'x_morph'} . "\t" . $this->{'afunaux'} . "\n";
        }

	if (0) {

            foreach (@annotes) {

                next if $nodes->[0][$i]->{'afun'} eq 'AuxS' and $_ eq 'comment';

                $this = $nodes->[0][$i];

                warn "-> " . "\t" . ThisAddress() . "\t" . ( defined $this->{'afun'} ? $this->{'afun'} : '???' ) .
                     "\t" . $_ . "\t" . $this->{$_} . "\t" . $mapping->{$this}->{$_} . "\n"
                    if defined $this->{$_} and $this->{$_} ne $mapping->{$this}->{$_} and ( $_ ne 'afun' or $this->{'afun'} ne '???' );

                $nodes->[0][$i]->{$_} = $mapping->{$nodes->[0][$i]}->{$_};
            }

            foreach (@changes) {

                $this = $nodes->[0][$i];

                warn "<- " . "\t" . ThisAddress() . "\t" . ( defined $this->{'afun'} ? $this->{'afun'} : '???' ) .
                     "\t" . $_ . "\t" . $this->{$_} . "\t" . $mapping->{$this}->{$_} . "\n"
                    if defined $mapping->{$this}->{$_} and $this->{$_} ne $mapping->{$this}->{$_};
            }

            if (node_ident($nodes->[0][$i]) eq node_ident($mapping->{$nodes->[0][$i]})) {

                if ($parent = $mapping->{$nodes->[0][$i]}->parent() and exists $mapping->{$parent}) {

                    if (grep { $_ eq $mapping->{$parent} } $nodes->[0][$i]->descendants()) {

                        CutPaste($mapping->{$parent}, $nodes->[0][$i]->root());
                    }

                    CutPaste($nodes->[0][$i], $mapping->{$parent});
                }
                elsif ($nodes->[0][$i]->{'afun'} ne 'AuxS') {

                    $nodes->[0][$i]->{'afunaux'} = $nodes->[0][$i]->{'afun'};
                    $nodes->[0][$i]->{'afun'} = '???';

                    $this = $nodes->[0][$i];

                    warn ">< " . "\t" . ThisAddress() . "\t" . ( defined $this->{'afun'} ? $this->{'afun'} : '???' ) .
                         "\t" . '...' . "\t" . $this->{'x_morph'} . "\t" . $this->{'afunaux'} . "\n";
                }
            }
            else {

                if ($parent = $mapping->{$nodes->[0][$i]}->parent() and exists $mapping->{$parent}) {

                    if (grep { $_ eq $mapping->{$parent} } $nodes->[0][$i]->descendants()) {

                        CutPaste($mapping->{$parent}, $nodes->[0][$i]->root());
                    }

                    CutPaste($nodes->[0][$i], $mapping->{$parent});
                }

                $nodes->[0][$i]->{'afunaux'} = $nodes->[0][$i]->{'afun'};
                $nodes->[0][$i]->{'afun'} = '???';

                $this = $nodes->[0][$i];

                warn "<> " . "\t" . ThisAddress() . "\t" . ( defined $this->{'afun'} ? $this->{'afun'} : '???' ) .
                     "\t" . '...' . "\t" . $this->{'x_morph'} . "\t" . $this->{'afunaux'} . "\n";
            }
        }
    }
}


sub record_mappings {

    $mapping->{$nodes->[0][$_[0]]} = $nodes->[1][$_[1]];
    $mapping->{$nodes->[1][$_[1]]} = $nodes->[0][$_[0]];
}


sub node_ident {

    return $_[0]->{'afun'} eq 'AuxS' ? '#root#' : novocalize $_[0]->{'form'};
}
